import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectString as __expectString, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeDateTime as __serializeDateTime, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { PartnerCentralSellingServiceException as __BaseException } from "../models/PartnerCentralSellingServiceException";
export const se_AcceptEngagementInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("AcceptEngagementInvitation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssignOpportunityCommand = async (input, context) => {
    const headers = sharedHeaders("AssignOpportunity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateOpportunityCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateOpportunity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEngagementCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEngagement");
    let body;
    body = JSON.stringify(se_CreateEngagementRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEngagementInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEngagementInvitation");
    let body;
    body = JSON.stringify(se_CreateEngagementInvitationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateOpportunityCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOpportunity");
    let body;
    body = JSON.stringify(se_CreateOpportunityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateResourceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResourceSnapshot");
    let body;
    body = JSON.stringify(se_CreateResourceSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateResourceSnapshotJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResourceSnapshotJob");
    let body;
    body = JSON.stringify(se_CreateResourceSnapshotJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourceSnapshotJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceSnapshotJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateOpportunityCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateOpportunity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAwsOpportunitySummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetAwsOpportunitySummary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEngagementCommand = async (input, context) => {
    const headers = sharedHeaders("GetEngagement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEngagementInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("GetEngagementInvitation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetOpportunityCommand = async (input, context) => {
    const headers = sharedHeaders("GetOpportunity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourceSnapshotJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceSnapshotJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSellingSystemSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSellingSystemSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEngagementByAcceptingInvitationTasksCommand = async (input, context) => {
    const headers = sharedHeaders("ListEngagementByAcceptingInvitationTasks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEngagementFromOpportunityTasksCommand = async (input, context) => {
    const headers = sharedHeaders("ListEngagementFromOpportunityTasks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEngagementInvitationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEngagementInvitations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEngagementMembersCommand = async (input, context) => {
    const headers = sharedHeaders("ListEngagementMembers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEngagementResourceAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEngagementResourceAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEngagementsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEngagements");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOpportunitiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListOpportunities");
    let body;
    body = JSON.stringify(se_ListOpportunitiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourceSnapshotJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceSnapshotJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourceSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceSnapshots");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSolutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSolutions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutSellingSystemSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("PutSellingSystemSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectEngagementInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("RejectEngagementInvitation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEngagementByAcceptingInvitationTaskCommand = async (input, context) => {
    const headers = sharedHeaders("StartEngagementByAcceptingInvitationTask");
    let body;
    body = JSON.stringify(se_StartEngagementByAcceptingInvitationTaskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEngagementFromOpportunityTaskCommand = async (input, context) => {
    const headers = sharedHeaders("StartEngagementFromOpportunityTask");
    let body;
    body = JSON.stringify(se_StartEngagementFromOpportunityTaskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartResourceSnapshotJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartResourceSnapshotJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopResourceSnapshotJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopResourceSnapshotJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SubmitOpportunityCommand = async (input, context) => {
    const headers = sharedHeaders("SubmitOpportunity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateOpportunityCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateOpportunity");
    let body;
    body = JSON.stringify(se_UpdateOpportunityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AcceptEngagementInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_AssignOpportunityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_AssociateOpportunityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_CreateEngagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEngagementInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateOpportunityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateOpportunityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateResourceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateResourceSnapshotJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourceSnapshotJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DisassociateOpportunityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_GetAwsOpportunitySummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAwsOpportunitySummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEngagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEngagementResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEngagementInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEngagementInvitationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetOpportunityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOpportunityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourceSnapshotJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceSnapshotJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSellingSystemSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEngagementByAcceptingInvitationTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEngagementByAcceptingInvitationTasksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEngagementFromOpportunityTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEngagementFromOpportunityTasksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEngagementInvitationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEngagementInvitationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEngagementMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEngagementResourceAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEngagementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEngagementsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOpportunitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListOpportunitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourceSnapshotJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourceSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSolutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSolutionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutSellingSystemSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RejectEngagementInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_StartEngagementByAcceptingInvitationTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartEngagementByAcceptingInvitationTaskResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartEngagementFromOpportunityTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartEngagementFromOpportunityTaskResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartResourceSnapshotJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_StopResourceSnapshotJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_SubmitOpportunityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateOpportunityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateOpportunityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.partnercentralselling#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.partnercentralselling#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.partnercentralselling#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.partnercentralselling#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.partnercentralselling#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.partnercentralselling#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.partnercentralselling#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateEngagementInvitationRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        EngagementIdentifier: [],
        Invitation: _json,
    });
};
const se_CreateEngagementRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Contexts: _json,
        Description: [],
        Title: [],
    });
};
const se_CreateOpportunityRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Customer: _json,
        LifeCycle: (_) => se_LifeCycle(_, context),
        Marketing: _json,
        NationalSecurity: [],
        OpportunityTeam: _json,
        OpportunityType: [],
        Origin: [],
        PartnerOpportunityIdentifier: [],
        PrimaryNeedsFromAws: _json,
        Project: _json,
        SoftwareRevenue: _json,
    });
};
const se_CreateResourceSnapshotJobRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        EngagementIdentifier: [],
        ResourceIdentifier: [],
        ResourceSnapshotTemplateIdentifier: [],
        ResourceType: [],
        Tags: _json,
    });
};
const se_CreateResourceSnapshotRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        EngagementIdentifier: [],
        ResourceIdentifier: [],
        ResourceSnapshotTemplateIdentifier: [],
        ResourceType: [],
    });
};
const se_LastModifiedDate = (input, context) => {
    return take(input, {
        AfterLastModifiedDate: __serializeDateTime,
        BeforeLastModifiedDate: __serializeDateTime,
    });
};
const se_LifeCycle = (input, context) => {
    return take(input, {
        ClosedLostReason: [],
        NextSteps: [],
        NextStepsHistory: (_) => se_NextStepsHistories(_, context),
        ReviewComments: [],
        ReviewStatus: [],
        ReviewStatusReason: [],
        Stage: [],
        TargetCloseDate: [],
    });
};
const se_ListOpportunitiesRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        CustomerCompanyName: _json,
        Identifier: _json,
        LastModifiedDate: (_) => se_LastModifiedDate(_, context),
        LifeCycleReviewStatus: _json,
        LifeCycleStage: _json,
        MaxResults: [],
        NextToken: [],
        Sort: _json,
    });
};
const se_NextStepsHistories = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_NextStepsHistory(entry, context);
    });
};
const se_NextStepsHistory = (input, context) => {
    return take(input, {
        Time: __serializeDateTime,
        Value: [],
    });
};
const se_StartEngagementByAcceptingInvitationTaskRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Identifier: [],
        Tags: _json,
    });
};
const se_StartEngagementFromOpportunityTaskRequest = (input, context) => {
    return take(input, {
        AwsSubmission: _json,
        Catalog: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Identifier: [],
        Tags: _json,
    });
};
const se_UpdateOpportunityRequest = (input, context) => {
    return take(input, {
        Catalog: [],
        Customer: _json,
        Identifier: [],
        LastModifiedDate: __serializeDateTime,
        LifeCycle: (_) => se_LifeCycle(_, context),
        Marketing: _json,
        NationalSecurity: [],
        OpportunityType: [],
        PartnerOpportunityIdentifier: [],
        PrimaryNeedsFromAws: _json,
        Project: _json,
        SoftwareRevenue: _json,
    });
};
const de_AwsOpportunityLifeCycle = (output, context) => {
    return take(output, {
        ClosedLostReason: __expectString,
        NextSteps: __expectString,
        NextStepsHistory: (_) => de_ProfileNextStepsHistories(_, context),
        Stage: __expectString,
        TargetCloseDate: __expectString,
    });
};
const de_CreateOpportunityResponse = (output, context) => {
    return take(output, {
        Id: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        PartnerOpportunityIdentifier: __expectString,
    });
};
const de_EngagementInvitationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EngagementInvitationSummary(entry, context);
    });
    return retVal;
};
const de_EngagementInvitationSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Catalog: __expectString,
        EngagementId: __expectString,
        EngagementTitle: __expectString,
        ExpirationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Id: __expectString,
        InvitationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ParticipantType: __expectString,
        PayloadType: __expectString,
        Receiver: (_) => _json(__expectUnion(_)),
        SenderAwsAccountId: __expectString,
        SenderCompanyName: __expectString,
        Status: __expectString,
    });
};
const de_EngagementSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        CreatedBy: __expectString,
        Id: __expectString,
        MemberCount: __expectInt32,
        Title: __expectString,
    });
};
const de_EngagementSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EngagementSummary(entry, context);
    });
    return retVal;
};
const de_GetAwsOpportunitySummaryResponse = (output, context) => {
    return take(output, {
        Catalog: __expectString,
        Customer: _json,
        Insights: _json,
        InvolvementType: __expectString,
        InvolvementTypeChangeReason: __expectString,
        LifeCycle: (_) => de_AwsOpportunityLifeCycle(_, context),
        OpportunityTeam: _json,
        Origin: __expectString,
        Project: _json,
        RelatedEntityIds: _json,
        RelatedOpportunityId: __expectString,
        Visibility: __expectString,
    });
};
const de_GetEngagementInvitationResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Catalog: __expectString,
        EngagementDescription: __expectString,
        EngagementId: __expectString,
        EngagementTitle: __expectString,
        ExistingMembers: _json,
        ExpirationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Id: __expectString,
        InvitationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        InvitationMessage: __expectString,
        Payload: (_) => _json(__expectUnion(_)),
        PayloadType: __expectString,
        Receiver: (_) => _json(__expectUnion(_)),
        RejectionReason: __expectString,
        SenderAwsAccountId: __expectString,
        SenderCompanyName: __expectString,
        Status: __expectString,
    });
};
const de_GetEngagementResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Contexts: _json,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        CreatedBy: __expectString,
        Description: __expectString,
        Id: __expectString,
        MemberCount: __expectInt32,
        Title: __expectString,
    });
};
const de_GetOpportunityResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Catalog: __expectString,
        CreatedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Customer: _json,
        Id: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        LifeCycle: (_) => de_LifeCycle(_, context),
        Marketing: _json,
        NationalSecurity: __expectString,
        OpportunityTeam: _json,
        OpportunityType: __expectString,
        PartnerOpportunityIdentifier: __expectString,
        PrimaryNeedsFromAws: _json,
        Project: _json,
        RelatedEntityIdentifiers: _json,
        SoftwareRevenue: _json,
    });
};
const de_GetResourceSnapshotJobResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Catalog: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        EngagementId: __expectString,
        Id: __expectString,
        LastFailure: __expectString,
        LastSuccessfulExecutionDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ResourceArn: __expectString,
        ResourceId: __expectString,
        ResourceSnapshotTemplateName: __expectString,
        ResourceType: __expectString,
        Status: __expectString,
    });
};
const de_GetResourceSnapshotResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Catalog: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        CreatedBy: __expectString,
        EngagementId: __expectString,
        Payload: (_) => _json(__expectUnion(_)),
        ResourceId: __expectString,
        ResourceSnapshotTemplateName: __expectString,
        ResourceType: __expectString,
        Revision: __expectInt32,
    });
};
const de_LifeCycle = (output, context) => {
    return take(output, {
        ClosedLostReason: __expectString,
        NextSteps: __expectString,
        NextStepsHistory: (_) => de_NextStepsHistories(_, context),
        ReviewComments: __expectString,
        ReviewStatus: __expectString,
        ReviewStatusReason: __expectString,
        Stage: __expectString,
        TargetCloseDate: __expectString,
    });
};
const de_ListEngagementByAcceptingInvitationTasksResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TaskSummaries: (_) => de_ListEngagementByAcceptingInvitationTaskSummaries(_, context),
    });
};
const de_ListEngagementByAcceptingInvitationTaskSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ListEngagementByAcceptingInvitationTaskSummary(entry, context);
    });
    return retVal;
};
const de_ListEngagementByAcceptingInvitationTaskSummary = (output, context) => {
    return take(output, {
        EngagementInvitationId: __expectString,
        Message: __expectString,
        OpportunityId: __expectString,
        ReasonCode: __expectString,
        ResourceSnapshotJobId: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        TaskArn: __expectString,
        TaskId: __expectString,
        TaskStatus: __expectString,
    });
};
const de_ListEngagementFromOpportunityTasksResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TaskSummaries: (_) => de_ListEngagementFromOpportunityTaskSummaries(_, context),
    });
};
const de_ListEngagementFromOpportunityTaskSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ListEngagementFromOpportunityTaskSummary(entry, context);
    });
    return retVal;
};
const de_ListEngagementFromOpportunityTaskSummary = (output, context) => {
    return take(output, {
        EngagementId: __expectString,
        EngagementInvitationId: __expectString,
        Message: __expectString,
        OpportunityId: __expectString,
        ReasonCode: __expectString,
        ResourceSnapshotJobId: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        TaskArn: __expectString,
        TaskId: __expectString,
        TaskStatus: __expectString,
    });
};
const de_ListEngagementInvitationsResponse = (output, context) => {
    return take(output, {
        EngagementInvitationSummaries: (_) => de_EngagementInvitationSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListEngagementsResponse = (output, context) => {
    return take(output, {
        EngagementSummaryList: (_) => de_EngagementSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListOpportunitiesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        OpportunitySummaries: (_) => de_OpportunitySummaries(_, context),
    });
};
const de_ListSolutionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        SolutionSummaries: (_) => de_SolutionList(_, context),
    });
};
const de_NextStepsHistories = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NextStepsHistory(entry, context);
    });
    return retVal;
};
const de_NextStepsHistory = (output, context) => {
    return take(output, {
        Time: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Value: __expectString,
    });
};
const de_OpportunitySummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OpportunitySummary(entry, context);
    });
    return retVal;
};
const de_OpportunitySummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Catalog: __expectString,
        CreatedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Customer: _json,
        Id: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        LifeCycle: _json,
        OpportunityType: __expectString,
        PartnerOpportunityIdentifier: __expectString,
        Project: _json,
    });
};
const de_ProfileNextStepsHistories = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProfileNextStepsHistory(entry, context);
    });
    return retVal;
};
const de_ProfileNextStepsHistory = (output, context) => {
    return take(output, {
        Time: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Value: __expectString,
    });
};
const de_SolutionBase = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Catalog: __expectString,
        Category: __expectString,
        CreatedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Id: __expectString,
        Name: __expectString,
        Status: __expectString,
    });
};
const de_SolutionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SolutionBase(entry, context);
    });
    return retVal;
};
const de_StartEngagementByAcceptingInvitationTaskResponse = (output, context) => {
    return take(output, {
        EngagementInvitationId: __expectString,
        Message: __expectString,
        OpportunityId: __expectString,
        ReasonCode: __expectString,
        ResourceSnapshotJobId: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        TaskArn: __expectString,
        TaskId: __expectString,
        TaskStatus: __expectString,
    });
};
const de_StartEngagementFromOpportunityTaskResponse = (output, context) => {
    return take(output, {
        EngagementId: __expectString,
        EngagementInvitationId: __expectString,
        Message: __expectString,
        OpportunityId: __expectString,
        ReasonCode: __expectString,
        ResourceSnapshotJobId: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        TaskArn: __expectString,
        TaskId: __expectString,
        TaskStatus: __expectString,
    });
};
const de_UpdateOpportunityResponse = (output, context) => {
    return take(output, {
        Id: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `AWSPartnerCentralSelling.${operation}`,
    };
}
